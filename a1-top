#!/bin/bash

function contains() {
    local n=$#
    local value=${!n}
    for ((i=1;i < $#;i++)) {
        if [ "${!i}" == "${value}" ]; then
            echo "y"
            return 0
        fi
    }
    echo "n"
    return 1
}



function quoteString() 
{
    delimiter=''
    for word in $1; do
        delimited="$delimited$delimiter\"$word\""
        delimiter=", "
    done
    echo $delimited
}

function createJson()
{
    # Initialize variables
    current_working_directory=$1
    index=""
    required_array=""
    other_files=()
    other_dirs=()
    required_files=()
    required_dirs=()
    # if README file exists, parse the index and required files:
    if test -f "$current_working_directory/README"; then
    
        index=$(awk -F: '$1 == "index" {for (i=2; i<NF; i++) printf $i ", "; print $NF}' $current_working_directory/README)

        required_array=$(awk -F: '$1 == "required" {for (i=2; i<NF; i++) printf $i " "; print $NF}' $current_working_directory/README)

        #convert required_array(which is a string right now) to array
        required_array=($required_array)

        # if the file in the required array is a directory, add to required_dirs. Otherwise add to required_files
        
        for files in ${required_array[@]}
        do
            if [ -d "$current_working_directory/$files" ]
            then
                required_dirs+=("$files")
            else
                required_files+=("$files")
            fi
        done
    fi
        for files in $(ls "$current_working_directory" -a)
        do
            if [ $(contains "${required_array[@]}" "$files") == "n" ]
            then
            # if the file is not in the required_array and is a directory, add to other_dirs.
                if [ -d "$current_working_directory/$files" ] && [ "$files" != "." ] && [ "$files" != ".." ]
                then
                    other_dirs+=("$files")
                # if the file is not the ., .., index file or the dir.json file, add to other_files.
                elif [ "$files" != "$index" ] && [ "$files" != "dir.json" ] && [ "$files" != "." ] && [ "$files" != ".." ]
                then
                    other_files+=("$files")
                fi
            fi
        done

    
    # convert all arrays to strings
    required_dirs_string=$( IFS=$' '; echo "${required_dirs[*]}" )
    required_files_string=$( IFS=$' '; echo "${required_files[*]}" )
    other_dirs_string=$( IFS=$' '; echo "${other_dirs[*]}" )
    other_files_string=$( IFS=$' '; echo "${other_files[*]}" )

    # add quotes to every word in the string and use comma as a delimiter between words
    required_dirs_string=$(quoteString "$required_dirs_string")
    required_files_string=$(quoteString "$required_files_string")
    other_dirs_string=$(quoteString "$other_dirs_string")
    other_files_string=$(quoteString "$other_files_string")

    # write to JSON file
    printf '{\n\t"index" : "%s",\n\t"required" : {\n\t\t"files": [%s],\n\t\t"directories": [%s]\n\t},\n\t"other" : {\n\t\t"files": [%s],\n\t\t"directories": [%s]\n\t}\n}\n' "$index" "$required_files_string" "$required_dirs_string" "$other_files_string" "$other_dirs_string" >$current_working_directory/dir.json


}

function startProgram() {
    for current_working_directory in `find $1 -type d`
    do
        createJson $current_working_directory
    done

}

if (( "$#" == 1 )); then
	if [[ -d $1 ]]; then
		dir="$1"
        startProgram $1
	else
		echo "Invalid directory. Usage: ./a1-top [directory]"
		exit 1
    fi
elif (( "$#" > 1 )); then
	echo "Too many arguments. Usage: ./a1-top [directory]"
	exit 2
else
    startProgram .
fi




